/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.bolt.bolt_embed;

import com.bolt.bolt_embed.utils.HTTPClient;
import com.bolt.bolt_embed.utils.SpeakeasyHTTPClient;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Bolt API Reference: A comprehensive Bolt API reference for interacting with Transactions, Orders, Product Catalog, Configuration, Testing, and much more.
 */
public class BoltEmbed {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.{username}.dev.bolt.me/v3",
        "https://{environment}.bolt.com/v3",
	};
  	
    /**
     * Account endpoints allow you to view and manage shoppers' accounts. For example,
     * you can add or remove addresses and payment information.
     * 
     */
    public Account account;
    /**
     * Merchant configuration endpoints allow you to retrieve and configure merchant-level
     * configuration, such as callback URLs, identifiers, secrets, etc...
     * 
     */
    public Configuration configuration;
    /**
     * Use the Payments API to tokenize and process alternative payment methods including Paypal with Bolt. This API is for the Bolt
     * Accounts package.
     * 
     */
    public Payments payments;
    /**
     * Endpoints that allow you to generate and retrieve test data to verify certain
     * flows in non-production environments.
     * 
     */
    public Testing testing;
    /**
     * Set up webhooks to notify your backend of events within Bolt. These webhooks
     * can communicate with your OMS or other systems to keep them up to date with Bolt.
     * 
     * https://help.bolt.com/get-started/during-checkout/webhooks/
     */
    public Webhooks webhooks;	

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(com.bolt.bolt_embed.models.shared.Security security) {
			this.sdkConfiguration.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = com.bolt.bolt_embed.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
        public enum ServerEnvironment {
            API("api"),
            API_SANDBOX("api-sandbox"),
            API_STAGING("api-staging");

            @JsonValue
            public final String value;

            private ServerEnvironment(String value) {
                this.value = value;
            }
        }

		/**
		 * Allows setting the $name variable for url substitution.
		 * @param environment The value to set.
		 * @return The builder instance.
		 */
		public Builder setEnvironment(ServerEnvironment environment) {
			for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
				if (!server.containsKey("environment")) {
					continue;
				}
				server.put("environment", environment.toString());
			}

			return this;
		}
		
		/**
		 * Allows setting the $name variable for url substitution.
		 * @param username The value to set.
		 * @return The builder instance.
		 */
		public Builder setUsername(String username) {
			for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
				if (!server.containsKey("username")) {
					continue;
				}
				server.put("username", username.toString());
			}

			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public BoltEmbed build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.security != null) {
				this.sdkConfiguration.securityClient = com.bolt.bolt_embed.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, this.sdkConfiguration.security);
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new BoltEmbed(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private BoltEmbed(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
		
		this.account = new Account(this.sdkConfiguration);
		
		this.configuration = new Configuration(this.sdkConfiguration);
		
		this.payments = new Payments(this.sdkConfiguration);
		
		this.testing = new Testing(this.sdkConfiguration);
		
		this.webhooks = new Webhooks(this.sdkConfiguration);
	}
}